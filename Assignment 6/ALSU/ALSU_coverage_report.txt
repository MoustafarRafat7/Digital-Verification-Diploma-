Coverage Report by instance with details

=================================================================================
=== Instance: /alsu_top/alsuif
=== Design Unit: work.alsu_if
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         80        80         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /alsu_top/alsuif --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                            A[2-0]           1           1      100.00 
                                            B[2-0]           1           1      100.00 
                                          bypass_A           1           1      100.00 
                                          bypass_B           1           1      100.00 
                                               cin           1           1      100.00 
                                               clk           1           1      100.00 
                                         direction           1           1      100.00 
                                        leds[15-0]           1           1      100.00 
                                       opcode[2-0]           1           1      100.00 
                                          out[5-0]           1           1      100.00 
                                          red_op_A           1           1      100.00 
                                          red_op_B           1           1      100.00 
                                               rst           1           1      100.00 
                                         serial_in           1           1      100.00 

Total Node Count     =         40 
Toggled Node Count   =         40 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (80 of 80 bins)

=================================================================================
=== Instance: /alsu_top/DUT/ALSU_SVA
=== Design Unit: work.ALSU_Assertions
=================================================================================

Assertion Coverage:
    Assertions                      19        19         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/alsu_top/DUT/ALSU_SVA/bypass_a_a
                     ALSU_Assertions.sv(88)             0          1
/alsu_top/DUT/ALSU_SVA/bypass_b_a
                     ALSU_Assertions.sv(91)             0          1
/alsu_top/DUT/ALSU_SVA/mult_a
                     ALSU_Assertions.sv(94)             0          1
/alsu_top/DUT/ALSU_SVA/add_a
                     ALSU_Assertions.sv(97)             0          1
/alsu_top/DUT/ALSU_SVA/or_a_a
                     ALSU_Assertions.sv(100)            0          1
/alsu_top/DUT/ALSU_SVA/or_b_a
                     ALSU_Assertions.sv(103)            0          1
/alsu_top/DUT/ALSU_SVA/a_or_b_a
                     ALSU_Assertions.sv(106)            0          1
/alsu_top/DUT/ALSU_SVA/xor_a_a
                     ALSU_Assertions.sv(110)            0          1
/alsu_top/DUT/ALSU_SVA/xor_b_a
                     ALSU_Assertions.sv(113)            0          1
/alsu_top/DUT/ALSU_SVA/a_xor_b_a
                     ALSU_Assertions.sv(116)            0          1
/alsu_top/DUT/ALSU_SVA/shift_right_a
                     ALSU_Assertions.sv(119)            0          1
/alsu_top/DUT/ALSU_SVA/shift_left_a
                     ALSU_Assertions.sv(122)            0          1
/alsu_top/DUT/ALSU_SVA/rotate_right_a
                     ALSU_Assertions.sv(125)            0          1
/alsu_top/DUT/ALSU_SVA/rotate_left_a
                     ALSU_Assertions.sv(128)            0          1
/alsu_top/DUT/ALSU_SVA/invalid_1_a
                     ALSU_Assertions.sv(131)            0          1
/alsu_top/DUT/ALSU_SVA/invalid_2_a
                     ALSU_Assertions.sv(134)            0          1
/alsu_top/DUT/ALSU_SVA/invalid_1_leds_a
                     ALSU_Assertions.sv(137)            0          1
/alsu_top/DUT/ALSU_SVA/invalid_2_leds_a
                     ALSU_Assertions.sv(140)            0          1
/alsu_top/DUT/ALSU_SVA/reset_outputs/reset_a
                     ALSU_Assertions.sv(148)            0          1
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /alsu_top/DUT/ALSU_SVA

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_Assertions.sv
------------------------------------IF Branch------------------------------------
    147                                    47163     Count coming in to IF
    147             1                        914         if(rst)
                                           46249     All False Count
Branch totals: 2 hits of 2 branches = 100.00%



Directive Coverage:
    Directives                      18        18         0   100.00%

DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/alsu_top/DUT/ALSU_SVA/bypass_a_c        ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(89)
                                                                              1871 Covered   
/alsu_top/DUT/ALSU_SVA/bypass_b_c        ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(92)
                                                                              1823 Covered   
/alsu_top/DUT/ALSU_SVA/mult_c            ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(95)
                                                                               238 Covered   
/alsu_top/DUT/ALSU_SVA/add_c             ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(98)
                                                                               265 Covered   
/alsu_top/DUT/ALSU_SVA/or_a_c            ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(101)
                                                                              1438 Covered   
/alsu_top/DUT/ALSU_SVA/or_b_c            ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(104)
                                                                               655 Covered   
/alsu_top/DUT/ALSU_SVA/a_or_b_c          ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(107)
                                                                              4124 Covered   
/alsu_top/DUT/ALSU_SVA/xor_a_c           ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(111)
                                                                              1416 Covered   
/alsu_top/DUT/ALSU_SVA/xor_b_c           ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(114)
                                                                               601 Covered   
/alsu_top/DUT/ALSU_SVA/a_xor_b_c         ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(117)
                                                                              4120 Covered   
/alsu_top/DUT/ALSU_SVA/shift_right_c     ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(120)
                                                                               106 Covered   
/alsu_top/DUT/ALSU_SVA/shift_left_c      ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(123)
                                                                               101 Covered   
/alsu_top/DUT/ALSU_SVA/rotate_right_c    ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(126)
                                                                               103 Covered   
/alsu_top/DUT/ALSU_SVA/rotate_left_c     ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(129)
                                                                               119 Covered   
/alsu_top/DUT/ALSU_SVA/invalid_1_c       ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(132)
                                                                              1510 Covered   
/alsu_top/DUT/ALSU_SVA/invalid_2_c       ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(135)
                                                                              19350 Covered   
/alsu_top/DUT/ALSU_SVA/invalid_1_leds_c  ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(138)
                                                                              1510 Covered   
/alsu_top/DUT/ALSU_SVA/invalid_2_leds_c  ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(141)
                                                                              19350 Covered   
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       1         1         0   100.00%

================================Statement Details================================

Statement Coverage for instance /alsu_top/DUT/ALSU_SVA --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_Assertions.sv
    2                                                module ALSU_Assertions(A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, clk, rst, direction, leds, out);
    3                                                parameter INPUT_PRIORITY = "A";
    4                                                parameter FULL_ADDER = "ON";
    5                                                input clk, rst, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    6                                                input [2:0] opcode;
    7                                                input signed [2:0] A, B; // A,B signed inputs
    8                                                input signed cin;
    9                                                input reg [15:0] leds;
    10                                               input reg signed [5:0] out;  // out signed output.
    11                                               
    12                                               // Valid Casses // 
    13                                               property BYPASS_A;
    14                                               @(posedge clk ) disable iff(rst)  ( bypass_A && INPUT_PRIORITY == "A") |=> ##1 ( (out == ( $past(A,2) )) ) ;  
    15                                               endproperty
    16                                               
    17                                               property BYPASS_B;
    18                                               @(posedge clk ) disable iff(rst) (!bypass_A && bypass_B) |=> ##1 ( (out == ( $past(B,2) ) )) ;  
    19                                               endproperty
    20                                               
    21                                               property Full_Adder ;
    22                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B || red_op_A || red_op_B) (opcode == ADD && FULL_ADDER == "ON") |=> ##1 ( (out == ( $past(A,2)+$past(B,2) + $past(cin,2) ) ) && ( leds == 16'b0 ) ) ;  
    23                                               endproperty
    24                                               
    25                                               property Multiplication;
    26                                               @(posedge clk)  disable iff (rst || bypass_A || bypass_B || red_op_A || red_op_B)  (opcode == MULT) |=> ##1 ( out == ( $past(A,2)*$past(B,2) ) &&( leds == 16'b0 ) );  
    27                                               endproperty
    28                                               
    29                                               property OR_A;
    30                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B ) (opcode == OR && red_op_A) |=> ##1 ( out == ( |$past(A,2) ) && ( leds == 16'b0 ) ); 
    31                                               endproperty
    32                                               
    33                                               property OR_B;
    34                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B ) (opcode == OR && !red_op_A && red_op_B) |=> ##1 ( out == ( |$past(B,2) ) && ( leds == 16'b0 ) ); 
    35                                               endproperty
    36                                               
    37                                               property A_OR_B;
    38                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B ) (opcode == OR && !red_op_A && !red_op_B) |=> ##1 ( out == ($past(A,2) |$past(B,2) ) && ( leds == 16'b0 ) ); 
    39                                               endproperty
    40                                               
    41                                               
    42                                               property XOR_A;
    43                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B ) (opcode == XOR && red_op_A) |=> ##1 ( out == ( ^$past(A,2) ) && ( leds == 16'b0 ) ); 
    44                                               endproperty
    45                                               
    46                                               property XOR_B;
    47                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B ) (opcode == XOR && !red_op_A && red_op_B) |=> ##1 ( out == ( ^$past(B,2) ) && ( leds == 16'b0 ) ); 
    48                                               endproperty
    49                                               
    50                                               property A_XOR_B;
    51                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B ) (opcode == XOR && !red_op_A && !red_op_B) |=> ##1 ( out == ($past(A,2) ^ $past(B,2) ) && ( leds == 16'b0 ) ); 
    52                                               endproperty
    53                                               
    54                                               property SHIFT_LEFT;
    55                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B || red_op_A || red_op_B) (opcode == SHIFT && direction == 1'b1) |=> ##1 ( ( out == {$past(out[4:0]),$past(serial_in,2)} ) && ( leds == 16'b0 ) ); 
    56                                               endproperty
    57                                               
    58                                               property SHIFT_RIGHT;
    59                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B || red_op_A || red_op_B) (opcode == SHIFT && direction == 1'b0) |=> ##1 ( ( out == {$past(serial_in,2),$past(out[5:1])} ) && ( leds == 16'b0 ) ); 
    60                                               endproperty
    61                                               
    62                                               property ROTATE_LEFT;
    63                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B || red_op_A || red_op_B) (opcode == ROTATE && direction == 1'b1) |=> ##1 ( ( out == {$past(out[4:0]),$past(out[5])} ) && ( leds == 16'b0 ) ); 
    64                                               endproperty
    65                                               
    66                                               property ROTATE_RIGHT;
    67                                               @(posedge clk) disable iff (rst || bypass_A || bypass_B || red_op_A || red_op_B) (opcode == ROTATE && direction == 1'b0) |=> ##1 ( ( out == {$past(out[0]),$past(out[5:1])} ) && ( leds == 16'b0 ) ); 
    68                                               endproperty
    69                                               
    70                                               // Invalid Cases //
    71                                               property INVALID_1;
    72                                               @(posedge clk ) disable iff(rst || bypass_A || bypass_B) (opcode == INVALID_6 || opcode == INVALID_7) |=> ##1 (out == 6'b0 );
    73                                               endproperty
    74                                               
    75                                               property INVALID_2;
    76                                               @(posedge clk ) disable iff(rst || bypass_A || bypass_B) ( (opcode != OR) && (opcode != XOR) && (red_op_A || red_op_B) ) |=> ##1 (out == 6'b0);
    77                                               endproperty
    78                                               
    79                                               property INVALID_1_leds;
    80                                               @(posedge clk ) disable iff(rst || bypass_A || bypass_B) (opcode == INVALID_6 || opcode == INVALID_7) |=> ##1 (leds == ~$past(leds));
    81                                               endproperty
    82                                               
    83                                               property INVALID_2_leds;
    84                                               @(posedge clk ) disable iff(rst || bypass_A || bypass_B) ( (opcode != OR) && (opcode != XOR) && (red_op_A || red_op_B) ) |=> ##1 (leds == ~$past(leds));
    85                                               endproperty
    86                                               
    87                                               
    88                                               bypass_a_a:assert property(BYPASS_A);
    89                                               bypass_a_c:cover property(BYPASS_A);
    90                                               
    91                                               bypass_b_a:assert property(BYPASS_B);
    92                                               bypass_b_c:cover property(BYPASS_B);
    93                                               
    94                                               mult_a:assert property (Multiplication);
    95                                               mult_c:cover property (Multiplication);
    96                                               
    97                                               add_a:assert property (Full_Adder);
    98                                               add_c:cover property (Full_Adder);
    99                                               
    100                                              or_a_a:assert property (OR_A);
    101                                              or_a_c:cover property (OR_A);
    102                                              
    103                                              or_b_a:assert property (OR_B);
    104                                              or_b_c:cover property (OR_B);
    105                                              
    106                                              a_or_b_a:assert property (A_OR_B);
    107                                              a_or_b_c:cover property (A_OR_B);
    108                                              
    109                                              
    110                                              xor_a_a:assert property (XOR_A);
    111                                              xor_a_c:cover property (XOR_A);
    112                                              
    113                                              xor_b_a:assert property (XOR_B);
    114                                              xor_b_c:cover property (XOR_B);
    115                                              
    116                                              a_xor_b_a:assert property (A_XOR_B);
    117                                              a_xor_b_c:cover property (A_XOR_B);
    118                                              
    119                                              shift_right_a:assert property (SHIFT_RIGHT);
    120                                              shift_right_c:cover property (SHIFT_RIGHT);
    121                                              
    122                                              shift_left_a:assert property (SHIFT_LEFT);
    123                                              shift_left_c:cover property (SHIFT_LEFT);
    124                                              
    125                                              rotate_right_a:assert property (ROTATE_RIGHT);
    126                                              rotate_right_c:cover property (ROTATE_RIGHT);
    127                                              
    128                                              rotate_left_a:assert property (ROTATE_LEFT);
    129                                              rotate_left_c:cover property (ROTATE_LEFT);
    130                                              
    131                                              invalid_1_a:assert property(INVALID_1);
    132                                              invalid_1_c:cover property(INVALID_1);
    133                                              
    134                                              invalid_2_a:assert property(INVALID_2);
    135                                              invalid_2_c:cover property(INVALID_2);
    136                                              
    137                                              invalid_1_leds_a:assert property(INVALID_1_leds);
    138                                              invalid_1_leds_c:cover property(INVALID_1_leds);
    139                                              
    140                                              invalid_2_leds_a:assert property(INVALID_2_leds);
    141                                              invalid_2_leds_c:cover property(INVALID_2_leds);
    142                                              
    143                                              
    144                                              
    145                                              
    146             1                      47163     always_comb begin : reset_outputs

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         80        80         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /alsu_top/DUT/ALSU_SVA --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                            A[0-2]           1           1      100.00 
                                            B[0-2]           1           1      100.00 
                                          bypass_A           1           1      100.00 
                                          bypass_B           1           1      100.00 
                                               cin           1           1      100.00 
                                               clk           1           1      100.00 
                                         direction           1           1      100.00 
                                        leds[15-0]           1           1      100.00 
                                       opcode[0-2]           1           1      100.00 
                                          out[5-0]           1           1      100.00 
                                          red_op_A           1           1      100.00 
                                          red_op_B           1           1      100.00 
                                               rst           1           1      100.00 
                                         serial_in           1           1      100.00 

Total Node Count     =         40 
Toggled Node Count   =         40 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (80 of 80 bins)

=================================================================================
=== Instance: /alsu_top/DUT
=== Design Unit: work.ALSU
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        31        31         0   100.00%

================================Branch Details================================

Branch Coverage for instance /alsu_top/DUT

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.V
------------------------------------IF Branch------------------------------------
    25                                     50531     Count coming in to IF
    25              1                       1064       if(rst) begin
    36              1                      49467       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    52                                     50531     Count coming in to IF
    52              1                       1064       if(rst) begin
    54              1                      49467       end else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    55                                     49467     Count coming in to IF
    55              1                      25414           if (invalid)
    57              1                      24053           else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    64                                     50522     Count coming in to IF
    64              1                       1060       if(rst) begin
    67              1                      49462       else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    68                                     49462     Count coming in to IF
    68              1                         61         if (bypass_A_reg && bypass_B_reg)
    70              1                       1822         else if (bypass_A_reg)
    72              1                       1836         else if (bypass_B_reg)
    74              1                      23490           else if (invalid) 
    76              1                      22253         else begin
Branch totals: 5 hits of 5 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    77                                     22253     Count coming in to CASE
    78              1                       7840               3'h0: begin 
    88              1                       7255               3'h1: begin
    98              1                       1828               3'h2:begin
    104             1                       1789               3'h3: out <= A_reg * B_reg;
    105             1                       1776               3'h4: begin
    111             1                       1765               3'h5: begin
Branch totals: 6 hits of 6 branches = 100.00%

------------------------------------IF Branch------------------------------------
    79                                      7840     Count coming in to IF
    79              1                        997                 if (red_op_A_reg && red_op_B_reg)
    81              1                        704                 else if (red_op_A_reg) 
    83              1                        763                 else if (red_op_B_reg)
    85              1                       5376                 else 
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    89                                      7255     Count coming in to IF
    89              1                       1032                 if (red_op_A_reg && red_op_B_reg)
    91              1                        660                 else if (red_op_A_reg) 
    93              1                        716                 else if (red_op_B_reg)
    95              1                       4847                 else 
Branch totals: 4 hits of 4 branches = 100.00%

------------------------------------IF Branch------------------------------------
    106                                     1776     Count coming in to IF
    106             1                        882                 if (direction_reg)
    108             1                        894                 else
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    112                                     1765     Count coming in to IF
    112             1                        933                 if (direction_reg)
    114             1                        832                 else
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       6         6         0   100.00%

================================Condition Details================================

Condition Coverage for instance /alsu_top/DUT --

  File ALSU.V
----------------Focused Condition View-------------------
Line       68 Item    1  (bypass_A_reg && bypass_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  bypass_A_reg         Y
  bypass_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  bypass_A_reg_0        -                             
  Row   2:          1  bypass_A_reg_1        bypass_B_reg                  
  Row   3:          1  bypass_B_reg_0        bypass_A_reg                  
  Row   4:          1  bypass_B_reg_1        bypass_A_reg                  

----------------Focused Condition View-------------------
Line       79 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         Y
  red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:          1  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:          1  red_op_B_reg_1        red_op_A_reg                  

----------------Focused Condition View-------------------
Line       89 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         Y
  red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:          1  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:          1  red_op_B_reg_1        red_op_A_reg                  


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      8         8         0   100.00%

================================Expression Details================================

Expression Coverage for instance /alsu_top/DUT --

  File ALSU.V
----------------Focused Expression View-----------------
Line       19 Item    1  ((red_op_A_reg | red_op_B_reg) & (opcode_reg[2] | opcode_reg[1]))
Expression totals: 4 of 4 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
   red_op_A_reg         Y
   red_op_B_reg         Y
  opcode_reg[2]         Y
  opcode_reg[1]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        ((opcode_reg[2] | opcode_reg[1]) && ~red_op_B_reg)
  Row   2:          1  red_op_A_reg_1        ((opcode_reg[2] | opcode_reg[1]) && ~red_op_B_reg)
  Row   3:          1  red_op_B_reg_0        ((opcode_reg[2] | opcode_reg[1]) && ~red_op_A_reg)
  Row   4:          1  red_op_B_reg_1        ((opcode_reg[2] | opcode_reg[1]) && ~red_op_A_reg)
  Row   5:          1  opcode_reg[2]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])
  Row   6:          1  opcode_reg[2]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])
  Row   7:          1  opcode_reg[1]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   8:          1  opcode_reg[1]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])

----------------Focused Expression View-----------------
Line       20 Item    1  (opcode_reg[1] & opcode_reg[2])
Expression totals: 2 of 2 input terms covered = 100.00%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  opcode_reg[1]_0       opcode_reg[2]                 
  Row   2:          1  opcode_reg[1]_1       opcode_reg[2]                 
  Row   3:          1  opcode_reg[2]_0       opcode_reg[1]                 
  Row   4:          1  opcode_reg[2]_1       opcode_reg[1]                 

----------------Focused Expression View-----------------
Line       21 Item    1  (invalid_red_op | invalid_opcode)
Expression totals: 2 of 2 input terms covered = 100.00%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  invalid_red_op         Y
  invalid_opcode         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  invalid_red_op_0      ~invalid_opcode               
  Row   2:          1  invalid_red_op_1      ~invalid_opcode               
  Row   3:          1  invalid_opcode_0      ~invalid_red_op               
  Row   4:          1  invalid_opcode_1      ~invalid_red_op               


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      48        48         0   100.00%

================================Statement Details================================

Statement Coverage for instance /alsu_top/DUT --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU.V
    1                                                module ALSU(A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, clk, rst, direction, leds, out);
    2                                                parameter INPUT_PRIORITY = "A";
    3                                                parameter FULL_ADDER = "ON";
    4                                                input clk, rst, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    5                                                input [2:0] opcode;
    6                                                input signed [2:0] A, B; // A,B signed inputs
    7                                                input signed cin;
    8                                                output reg [15:0] leds;
    9                                                output reg signed [5:0] out;  // out signed output.
    10                                               
    11                                               reg red_op_A_reg, red_op_B_reg, bypass_A_reg, bypass_B_reg, direction_reg, serial_in_reg;
    12                                               reg [2:0] opcode_reg;
    13                                               reg signed [2:0] A_reg, B_reg;  // should be Signed 
    14                                               reg signed [1:0]cin_reg;
    15                                               
    16                                               wire invalid_red_op, invalid_opcode, invalid;
    17                                               
    18                                               //Invalid handling
    19              1                      47235     assign invalid_red_op = (red_op_A_reg | red_op_B_reg) & (opcode_reg[2] | opcode_reg[1]);
    20              1                      42109     assign invalid_opcode = opcode_reg[1] & opcode_reg[2];
    21              1                      26890     assign invalid = invalid_red_op | invalid_opcode;
    22                                               
    23                                               //Registering input signals
    24              1                      50531     always @(posedge clk or posedge rst) begin
    25                                                 if(rst) begin
    26              1                       1064          cin_reg <= 0;
    27              1                       1064          red_op_B_reg <= 0;
    28              1                       1064          red_op_A_reg <= 0;
    29              1                       1064          bypass_B_reg <= 0;
    30              1                       1064          bypass_A_reg <= 0;
    31              1                       1064          direction_reg <= 0;
    32              1                       1064          serial_in_reg <= 0;
    33              1                       1064          opcode_reg <= 0;
    34              1                       1064          A_reg <= 0;
    35              1                       1064          B_reg <= 0;
    36                                                 end else begin
    37              1                      49467          cin_reg <= cin;
    38              1                      49467          red_op_B_reg <= red_op_B;
    39              1                      49467          red_op_A_reg <= red_op_A;
    40              1                      49467          bypass_B_reg <= bypass_B;
    41              1                      49467          bypass_A_reg <= bypass_A;
    42              1                      49467          direction_reg <= direction;
    43              1                      49467          serial_in_reg <= serial_in;
    44              1                      49467          opcode_reg <= opcode;
    45              1                      49467          A_reg <= A;
    46              1                      49467          B_reg <= B;
    47                                                 end
    48                                               end
    49                                               
    50                                               //leds output blinking 
    51              1                      50531     always @(posedge clk or posedge rst) begin
    52                                                 if(rst) begin
    53              1                       1064          leds <= 0;
    54                                                 end else begin
    55                                                     if (invalid)
    56              1                      25414             leds <= ~leds;
    57                                                     else
    58              1                      24053             leds <= 0;
    59                                                 end
    60                                               end
    61                                               
    62                                               //ALSU output processing
    63              1                      50522     always @(posedge clk or posedge rst) begin
    64                                                 if(rst) begin
    65              1                       1060         out <= 0;
    66                                                 end
    67                                                 else begin
    68                                                   if (bypass_A_reg && bypass_B_reg)
    69              1                         61           out <= (INPUT_PRIORITY == "A")? A_reg: B_reg;
    70                                                   else if (bypass_A_reg)
    71              1                       1822           out <= A_reg;
    72                                                   else if (bypass_B_reg)
    73              1                       1836           out <= B_reg;
    74                                                     else if (invalid) 
    75              1                      23490             out <= 0;
    76                                                   else begin
    77                                                       case (opcode_reg) //opcode_reg not opcode
    78                                                         3'h0: begin 
    79                                                           if (red_op_A_reg && red_op_B_reg)
    80              1                        997                   out <= (INPUT_PRIORITY == "A")? |A_reg: |B_reg;
    81                                                           else if (red_op_A_reg) 
    82              1                        704                   out <= |A_reg; //Bug OR not AND
    83                                                           else if (red_op_B_reg)
    84              1                        763                   out <= |B_reg;
    85                                                           else 
    86              1                       5376                   out <= A_reg | B_reg;
    87                                                         end
    88                                                         3'h1: begin
    89                                                           if (red_op_A_reg && red_op_B_reg)
    90              1                       1032                   out <= (INPUT_PRIORITY == "A")? ^A_reg: ^B_reg;   //XOR not OR
    91                                                           else if (red_op_A_reg) 
    92              1                        660                   out <= ^A_reg;
    93                                                           else if (red_op_B_reg)
    94              1                        716                   out <= ^B_reg;
    95                                                           else 
    96              1                       4847                   out <= A_reg ^ B_reg;
    97                                                         end
    98                                                         3'h2:begin
    99                                                           if(FULL_ADDER == "ON")
    100             1                       1828                 out <= A_reg + B_reg + cin_reg;
    101                                                          else
    102                                                          out <= A_reg + B_reg;
    103                                                        end 
    104             1                       1789               3'h3: out <= A_reg * B_reg;
    105                                                        3'h4: begin
    106                                                          if (direction_reg)
    107             1                        882                   out <= {out[4:0], serial_in_reg};
    108                                                          else
    109             1                        894                   out <= {serial_in_reg, out[5:1]};
    110                                                        end
    111                                                        3'h5: begin
    112                                                          if (direction_reg)
    113             1                        933                   out <= {out[4:0], out[5]};
    114                                                          else
    115             1                        832                   out <= {out[0],out[5:1]};

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        120       120         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /alsu_top/DUT --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                            A[0-2]           1           1      100.00 
                                        A_reg[2-0]           1           1      100.00 
                                            B[0-2]           1           1      100.00 
                                        B_reg[2-0]           1           1      100.00 
                                          bypass_A           1           1      100.00 
                                      bypass_A_reg           1           1      100.00 
                                          bypass_B           1           1      100.00 
                                      bypass_B_reg           1           1      100.00 
                                               cin           1           1      100.00 
                                      cin_reg[1-0]           1           1      100.00 
                                               clk           1           1      100.00 
                                         direction           1           1      100.00 
                                     direction_reg           1           1      100.00 
                                           invalid           1           1      100.00 
                                    invalid_opcode           1           1      100.00 
                                    invalid_red_op           1           1      100.00 
                                        leds[15-0]           1           1      100.00 
                                       opcode[0-2]           1           1      100.00 
                                   opcode_reg[2-0]           1           1      100.00 
                                          out[5-0]           1           1      100.00 
                                          red_op_A           1           1      100.00 
                                      red_op_A_reg           1           1      100.00 
                                          red_op_B           1           1      100.00 
                                      red_op_B_reg           1           1      100.00 
                                               rst           1           1      100.00 
                                         serial_in           1           1      100.00 
                                     serial_in_reg           1           1      100.00 

Total Node Count     =         60 
Toggled Node Count   =         60 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (120 of 120 bins)

=================================================================================
=== Instance: /alsu_top
=== Design Unit: work.alsu_top
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       6         6         0   100.00%

================================Statement Details================================

Statement Coverage for instance /alsu_top --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_top.sv
    4                                                module alsu_top();
    5                                                
    6                                                bit clk;
    7                                                
    8                                                initial begin
    9               1                          1         clk=1'b0;
    10              1                          1     forever begin
    11              1                     100003         #2;clk=~clk;
    11              2                     100002     
    12                                               end
    13                                               end
    14                                               alsu_if alsuif(clk);
    15                                               ALSU DUT (.A(alsuif.A), .B(alsuif.B), .cin(alsuif.cin), .serial_in(alsuif.serial_in), .red_op_A(alsuif.red_op_A)
    16                                                       , .red_op_B(alsuif.red_op_B), .opcode(alsuif.opcode), .bypass_A(alsuif.bypass_A), .bypass_B(alsuif.bypass_B)
    17                                                       , .clk(clk), .rst(alsuif.rst), .direction(alsuif.direction), .leds(alsuif.leds), .out(alsuif.out));
    18                                               
    19                                               bind ALSU ALSU_Assertions ALSU_SVA (
    20                                                   .A(alsuif.A), .B(alsuif.B), .cin(alsuif.cin), .serial_in(alsuif.serial_in),
    21                                                   .red_op_A(alsuif.red_op_A), .red_op_B(alsuif.red_op_B), .opcode(alsuif.opcode),
    22                                                   .bypass_A(alsuif.bypass_A), .bypass_B(alsuif.bypass_B), .clk(clk), .rst(alsuif.rst),
    23                                                   .direction(alsuif.direction), .leds(alsuif.leds), .out(alsuif.out)
    24                                               );
    25                                               
    26                                               initial begin
    27                                               
    28              1                          1     uvm_config_db #(virtual alsu_if)::set(null,"uvm_test_top","alsu_IF",alsuif);
    29              1                          1     run_test("alsu_test");            

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                          2         2         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /alsu_top --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           1           1      100.00 

Total Node Count     =          1 
Toggled Node Count   =          1 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (2 of 2 bins)

=================================================================================
=== Instance: /ALSU_sequence_item_pkg
=== Design Unit: work.ALSU_sequence_item_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         2         8    20.00%

================================Branch Details================================

Branch Coverage for instance /ALSU_sequence_item_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_sequence_item.sv
------------------------------------IF Branch------------------------------------
    14                                   ***0***     Count coming in to IF
    14              1                    ***0***     `uvm_object_utils(ALSU_sequence_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    14                                     50001     Count coming in to IF
    14              2                    ***0***     `uvm_object_utils(ALSU_sequence_item)
                                           50001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    14                                   ***0***     Count coming in to IF
    14              3                    ***0***     `uvm_object_utils(ALSU_sequence_item)
    14              4                    ***0***     `uvm_object_utils(ALSU_sequence_item)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    14                                     50001     Count coming in to IF
    14              5                    ***0***     `uvm_object_utils(ALSU_sequence_item)
                                           50001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    14                                   ***0***     Count coming in to IF
    14              6                    ***0***     `uvm_object_utils(ALSU_sequence_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /ALSU_sequence_item_pkg --

  File ALSU_sequence_item.sv
----------------Focused Condition View-------------------
Line       14 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       14 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      13         3        10    23.07%

================================Statement Details================================

Statement Coverage for instance /ALSU_sequence_item_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_sequence_item.sv
    1                                                package ALSU_sequence_item_pkg;
    2                                                import uvm_pkg::*;
    3                                                `include"uvm_macros.svh"
    4                                                
    5                                                // Enums //
    6                                                typedef enum {OR=0,XOR,ADD,MULT,SHIFT,ROTATE,INVALID_6,INVALID_7}opcode_e;
    7                                                
    8                                                // Parameters //
    9                                                parameter MAXPOS=3;
    10                                               parameter ZERO=0;
    11                                               parameter MAXNEG=-4;
    12                                               
    13                                               class ALSU_sequence_item extends uvm_sequence_item ;
    14              1                    ***0***     `uvm_object_utils(ALSU_sequence_item)
    14              2                    ***0***     
    14              3                    ***0***     
    14              4                    ***0***     
    14              5                    ***0***     
    14              6                      50001     
    14              7                    ***0***     
    14              8                    ***0***     
    14              9                      50001     
    14             10                    ***0***     
    15                                               
    16                                               rand bit signed [2:0] A, B;
    17                                               rand bit rst;
    18                                               rand opcode_e opcode;
    19                                               rand bit cin, serial_in, red_op_A, red_op_B, bypass_A, bypass_B, direction;
    20                                               logic signed [5:0] out;
    21                                               logic [15:0] leds;
    22                                               
    23                                               rand opcode_e arr [6];
    24                                               
    25                                               function new (string name = "ALSU_sequence_item");
    26              1                     150005         super.new(name);
    27                                               endfunction
    28                                               
    29                                               // Constraints block //
    30                                               
    31                                               constraint Reset_Cons {
    32                                               
    33                                                   //Reset to be asserted with a low probability//
    34                                                   rst dist {1:=1,0:=99}; 
    35                                               }
    36                                               
    37                                               constraint bypass_Cons{
    38                                                   // bypass_A and bypass_B should be disabled most of the time //
    39                                                   bypass_A dist {1:=4,0:=96};
    40                                                   bypass_B dist {1:=4,0:=96};
    41                                               }
    42                                               constraint invalid_opcode_Cons {    
    43                                                   // Invalid cases should occur less frequent than the valid cases //
    44                                                   opcode dist {INVALID_6:/2,INVALID_7:/2,[0:5]:/96};
    45                                               }
    46                                               
    47                                               constraint ADD_MULT_opcode{
    48                                                   // in case of addition or multiplication inputs (A, B) to take the values (MAXPOS, ZERO and MAXNEG) more often than others //
    49                                                   if( opcode == ADD || opcode == MULT )
    50                                                   {
    51                                                   A dist {MAXPOS:/33,MAXNEG:/32,ZERO:/30,[-3:-1]:/3,[1:2]:/2} ;
    52                                                   B dist {MAXPOS:/33,MAXNEG:/32,ZERO:/30,[-3:-1]:/3,[1:2]:/2} ;
    53                                                   }
    54                                               }
    55                                               
    56                                               constraint OR_XOR_opcode_A{
    57                                                    if(opcode == OR || opcode == XOR)
    58                                                   {
    59                                                       if (red_op_A) {
    60                                                           A dist {3'b001:/30,3'b010:/30,3'b100:/30,[-3:-1]:/6,3'b011:/2,3'b000:/2} ;
    61                                                           B == 0;
    62                                                       }
    63                                                       else if (red_op_B) {
    64                                                           B dist {3'b001:/30,3'b010:/30,3'b100:/30,[-3:-1]:/6,3'b011:/2,3'b000:/2}  ;
    65                                                           A == 0;
    66                                                       }
    67                                                   }
    68                                               }
    69                                               
    70                                               
    71                                               constraint arr_cons {
    72                                               foreach (arr[i]) 
    73                                                   foreach (arr[j]){ 
    74                                                       if (i != j ){ 
    75                                                           arr[i] != arr[j];
    76                                                           arr[i] inside {[OR:ROTATE]};
    77                                                       }
    78                                                   }
    79                                               }
    80                                               
    81                                               
    82                                               function string  convert2string ();
    83              1                    ***0***     return $sformatf("%s  A = 0%0b ,B = 0%0b ,cin = 0%0b ,serial_in = 0%0b ,red_op_A = 0%0b ,red_op_B = 0%0b ,opcode = 0%0b ,bypass_A = 0%0b ,bypass_B = 0%0b ,rst = 0%0b ,direction = 0%0b ,leds = 0%0b ,out = 0%0b",super.convert2string(),A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, rst, direction, leds, out);
    84                                               endfunction
    85                                               
    86                                               function string  convert2string_stimulus ();
    87              1                    ***0***     return $sformatf("A = 0%0b ,B = 0%0b ,cin = 0%0b ,serial_in = 0%0b ,red_op_A = 0%0b ,red_op_B = 0%0b ,opcode = 0%0b ,bypass_A = 0%0b ,bypass_B = 0%0b ,rst = 0%0b ,direction = 0%0b",A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, rst, direction);


=================================================================================
=== Instance: /ALSU_sequence_pkg
=== Design Unit: work.ALSU_sequence_pkg
=================================================================================

Assertion Coverage:
    Assertions                       1         1         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/ALSU_sequence_pkg/ALSU_main_seq/body/#ublk#37877255#38/immed__41
                     ALSU_sequence.sv(41)               0          1
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        20         4        16    20.00%

================================Branch Details================================

Branch Coverage for instance /ALSU_sequence_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_sequence.sv
------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               1                    ***0***     `uvm_object_utils(ALSU_reset_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    7                                          1     Count coming in to IF
    7               2                    ***0***     `uvm_object_utils(ALSU_reset_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               3                    ***0***     `uvm_object_utils(ALSU_reset_seq)
    7               4                    ***0***     `uvm_object_utils(ALSU_reset_seq)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    7                                          1     Count coming in to IF
    7               5                    ***0***     `uvm_object_utils(ALSU_reset_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    7                                    ***0***     Count coming in to IF
    7               6                    ***0***     `uvm_object_utils(ALSU_reset_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    30                                   ***0***     Count coming in to IF
    30              1                    ***0***     `uvm_object_utils(ALSU_main_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    30                                         1     Count coming in to IF
    30              2                    ***0***     `uvm_object_utils(ALSU_main_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    30                                   ***0***     Count coming in to IF
    30              3                    ***0***     `uvm_object_utils(ALSU_main_seq)
    30              4                    ***0***     `uvm_object_utils(ALSU_main_seq)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    30                                         1     Count coming in to IF
    30              5                    ***0***     `uvm_object_utils(ALSU_main_seq)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    30                                   ***0***     Count coming in to IF
    30              6                    ***0***     `uvm_object_utils(ALSU_main_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       4         0         4     0.00%

================================Condition Details================================

Condition Coverage for instance /ALSU_sequence_pkg --

  File ALSU_sequence.sv
----------------Focused Condition View-------------------
Line       7 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       7 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             

----------------Focused Condition View-------------------
Line       30 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       30 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      40        24        16    60.00%

================================Statement Details================================

Statement Coverage for instance /ALSU_sequence_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_sequence.sv
    1                                                package ALSU_sequence_pkg;
    2                                                
    3                                                import uvm_pkg::*;
    4                                                `include"uvm_macros.svh"
    5                                                 import ALSU_sequence_item_pkg::*;
    6                                                class ALSU_reset_seq extends uvm_sequence #(ALSU_sequence_item);
    7               1                    ***0***     `uvm_object_utils(ALSU_reset_seq)
    7               2                    ***0***     
    7               3                    ***0***     
    7               4                    ***0***     
    7               5                    ***0***     
    7               6                          1     
    7               7                    ***0***     
    7               8                    ***0***     
    7               9                          1     
    7              10                    ***0***     
    8                                                
    9                                                ALSU_sequence_item seq_item;
    10                                               function new (string name = "ALSU_reset_seq");
    11              1                          1         super.new(name);
    12                                               endfunction
    13                                               
    14                                               task body ;
    15              1                          1     seq_item = ALSU_sequence_item::type_id::create("seq_item");
    16              1                          1     start_item(seq_item);
    17              1                          1     seq_item.rst=1;
    18              1                          1     seq_item.A=0;
    19              1                          1     seq_item.B=0;
    20              1                          1     seq_item.opcode=opcode_e'(0);
    21              1                          1     seq_item.cin = 0 ; seq_item.serial_in = 0 ; seq_item.red_op_A = 0 ; seq_item.red_op_B = 0 ; 
    21              2                          1     
    21              3                          1     
    21              4                          1     
    22              1                          1     seq_item.bypass_A = 0 ; seq_item.bypass_B = 0 ; seq_item.direction = 0 ;
    22              2                          1     
    22              3                          1     
    23              1                          1     finish_item(seq_item);
    24                                               endtask
    25                                               
    26                                               
    27                                               endclass
    28                                               
    29                                               class ALSU_main_seq extends uvm_sequence #(ALSU_sequence_item);
    30              1                    ***0***     `uvm_object_utils(ALSU_main_seq)
    30              2                    ***0***     
    30              3                    ***0***     
    30              4                    ***0***     
    30              5                    ***0***     
    30              6                          1     
    30              7                    ***0***     
    30              8                    ***0***     
    30              9                          1     
    30             10                    ***0***     
    31                                               
    32                                               ALSU_sequence_item seq_item;
    33                                               function new (string name = "ALSU_main_seq");
    34              1                          1         super.new(name);
    35                                               endfunction
    36                                               
    37                                               task body;
    38              1                      50000     repeat(50000) begin
    39              1                      50000     seq_item = ALSU_sequence_item::type_id::create("seq_item");
    40              1                      50000     start_item(seq_item);
    41                                               assert(seq_item.randomize());
    42              1                      50000     finish_item(seq_item);


=================================================================================
=== Instance: /ALSU_coverage_collector_pkg
=== Design Unit: work.ALSU_coverage_collector_pkg
=================================================================================

Covergroup Coverage:
    Covergroups                      1        na        na   100.00%
        Coverpoints/Crosses         17        na        na        na
            Covergroup Bins         32        32         0   100.00%
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /ALSU_coverage_collector_pkg/ALSU_coverage/cvr_gp 
                                                      100.00%        100          -    Covered              
    covered/total bins:                                    32         32          -                      
    missing/total bins:                                     0         32          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint A_cp                                   100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint A_cp1                                  100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint B_cp                                   100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint B_cp1                                  100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint ALU_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 7          7          -                      
        missing/total bins:                                 0          7          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Cin_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Shift_in_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Direction_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint RED_OP_A_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint RED_OP_B_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Cross ADD_MULT_A_B_Zero_MaxP_N                    100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross ADD_CIN                                     100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross Shift_Serial_in                             100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross ROT_SHIFT_Direction                         100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross cross_5                                     100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross cross_6                                     100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross Invalid_OR_XOR                              100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
 Covergroup instance \/ALSU_coverage_collector_pkg::ALSU_coverage::cvr_gp  
                                                      100.00%        100          -    Covered              
    covered/total bins:                                    32         32          -                      
    missing/total bins:                                     0         32          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint A_cp                                   100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin A_data_0                                     9881          1          -    Covered              
        bin A_data_max                                   8868          1          -    Covered              
        bin A_data_min                                   9867          1          -    Covered              
        default bin A_data_default                      21385                     -    Occurred             
    Coverpoint A_cp1                                  100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin A_data_walkingones[1]                        2439          1          -    Covered              
        bin A_data_walkingones[2]                        2387          1          -    Covered              
    Coverpoint B_cp                                   100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin B_data_0                                    12059          1          -    Covered              
        bin B_data_max                                   8787          1          -    Covered              
        bin B_data_min                                   9248          1          -    Covered              
        default bin B_data_default                      19907                     -    Occurred             
    Coverpoint B_cp1                                  100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin B_data_walkingones[1]                        1086          1          -    Covered              
        bin B_data_walkingones[2]                        1161          1          -    Covered              
    Coverpoint ALU_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 7          7          -                      
        missing/total bins:                                 0          7          -                      
        % Hit:                                        100.00%        100          -                      
        illegal_bin Bins_invalid[INVALID_6]              1031                     -    Occurred             
        illegal_bin Bins_invalid[INVALID_7]               982                     -    Occurred             
        bin Bins_shift[SHIFT]                            7933          1          -    Covered              
        bin Bins_shift[ROTATE]                           7958          1          -    Covered              
        bin Bins_arith[ADD]                              7989          1          -    Covered              
        bin Bins_arith[MULT]                             7972          1          -    Covered              
        bin Bins_bitwise[OR]                             8086          1          -    Covered              
        bin Bins_bitwise[XOR]                            8050          1          -    Covered              
        bin Bins_trans                                      1          1          -    Covered              
    Coverpoint Cin_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin cin_zero_one                                50001          1          -    Covered              
    Coverpoint Shift_in_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin SERIAL_IN_zero_one                          50001          1          -    Covered              
    Coverpoint Direction_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin Direction_zero_one                          50001          1          -    Covered              
    Coverpoint RED_OP_A_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin reduction_a_0                               29248          1          -    Covered              
        bin reduction_a_1                               20753          1          -    Covered              
    Coverpoint RED_OP_B_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin reduction_b_0                               29157          1          -    Covered              
        bin reduction_b_1                               20844          1          -    Covered              
    Cross ADD_MULT_A_B_Zero_MaxP_N                    100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin mult_add_a_b                            14374          1          -    Covered              
    Cross ADD_CIN                                     100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin Cin_Add_zero_one                         7989          1          -    Covered              
    Cross Shift_Serial_in                             100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin Shift_in_zero_one                        7933          1          -    Covered              
    Cross ROT_SHIFT_Direction                         100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin Direction_ROT_Shift_zero_one            15891          1          -    Covered              
    Cross cross_5                                     100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin A_data_walkingones_b_zero                2441          1          -    Covered              
    Cross cross_6                                     100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin B_data_walkingones_A_zero                1071          1          -    Covered              
    Cross Invalid_OR_XOR                              100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin invalid_reduction_A                     15992          1          -    Covered              
            bin invalid_reduction_B                     15978          1          -    Covered              
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      14        12         2    85.71%

================================Statement Details================================

Statement Coverage for instance /ALSU_coverage_collector_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_coverage_collector.sv
    1                                                package ALSU_coverage_collector_pkg;
    2                                                
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                import ALSU_sequence_item_pkg::*;
    6                                                class ALSU_coverage extends uvm_component;
    7               1                    ***0***     `uvm_component_utils(ALSU_coverage)
    7               2                    ***0***     
    7               3                          2     
    8                                                uvm_analysis_export #(ALSU_sequence_item) cov_export;
    9                                                uvm_tlm_analysis_fifo #(ALSU_sequence_item) cov_fifo;
    10                                               
    11                                               ALSU_sequence_item cov_seq_item;
    12                                               
    13                                               covergroup cvr_gp ;
    14                                               A_cp:coverpoint cov_seq_item.A {
    15                                                                   bins A_data_0 ={ZERO};
    16                                                                   bins A_data_max= {MAXPOS};
    17                                                                   bins A_data_min= {MAXNEG};
    18                                                                   bins A_data_default =default;
    19                                               }
    20                                               A_cp1:coverpoint cov_seq_item.A  iff (cov_seq_item.red_op_A) {bins A_data_walkingones []={3'b001,3'b010,3'b100};}
    21                                               
    22                                               B_cp:coverpoint cov_seq_item.B{
    23                                                                   bins B_data_0 ={ZERO};
    24                                                                   bins B_data_max= {MAXPOS};
    25                                                                   bins B_data_min= {MAXNEG};
    26                                                                   bins B_data_default =default;
    27                                               }
    28                                               B_cp1:coverpoint cov_seq_item.B  iff (!cov_seq_item.red_op_A && cov_seq_item.red_op_B) {bins B_data_walkingones []={3'b001,3'b010,3'b100};}
    29                                               
    30                                               ALU_cp:coverpoint cov_seq_item.opcode {
    31                                                                        bins Bins_shift[] = {SHIFT,ROTATE};
    32                                                                        bins Bins_arith[] = {ADD,MULT};
    33                                                                        bins Bins_bitwise[] = {OR,XOR};
    34                                                                        illegal_bins Bins_invalid[]={INVALID_6,INVALID_7};
    35                                                                        bins Bins_trans=(OR=>XOR=>ADD=>MULT=>SHIFT=>ROTATE);
    36                                               }
    37                                               
    38                                               Cin_cp:coverpoint cov_seq_item.cin {bins cin_zero_one = {0,1};} 
    39                                               Shift_in_cp:coverpoint cov_seq_item.serial_in {bins SERIAL_IN_zero_one = {0,1};} 
    40                                               Direction_cp:coverpoint cov_seq_item.direction {bins Direction_zero_one = {0,1};}
    41                                               RED_OP_A_cp:coverpoint cov_seq_item.red_op_A {bins reduction_a_0={0};
    42                                                                                bins reduction_a_1={1};
    43                                               }
    44                                               RED_OP_B_cp:coverpoint cov_seq_item.red_op_B {bins reduction_b_0={0};
    45                                                                                bins reduction_b_1={1};
    46                                               }
    47                                               
    48                                               ADD_MULT_A_B_Zero_MaxP_N:cross  ALU_cp,A_cp,B_cp {
    49                                                                               bins mult_add_a_b= binsof(ALU_cp.Bins_arith);
    50                                                                               option.cross_auto_bin_max=0;
    51                                               }
    52                                               ADD_CIN: cross Cin_cp,ALU_cp {
    53                                                               bins Cin_Add_zero_one = binsof(ALU_cp) intersect {ADD} && binsof(Cin_cp.cin_zero_one);
    54                                                               option.cross_auto_bin_max=0;
    55                                               }
    56                                               
    57                                               Shift_Serial_in :cross Shift_in_cp,ALU_cp {
    58                                                               bins Shift_in_zero_one = binsof(ALU_cp) intersect {SHIFT} && binsof(Shift_in_cp.SERIAL_IN_zero_one);
    59                                                               option.cross_auto_bin_max=0;
    60                                               }
    61                                               
    62                                               ROT_SHIFT_Direction :cross Direction_cp,ALU_cp {
    63                                                               bins Direction_ROT_Shift_zero_one = binsof(ALU_cp.Bins_shift) && binsof(Direction_cp.Direction_zero_one);
    64                                                               option.cross_auto_bin_max=0;
    65                                               }
    66                                               
    67                                               cross_5: cross  ALU_cp,A_cp1,B_cp {
    68                                                               bins A_data_walkingones_b_zero = binsof(ALU_cp.Bins_bitwise) && binsof(A_cp1.A_data_walkingones) && binsof(B_cp.B_data_0) ;
    69                                                               option.cross_auto_bin_max=0;
    70                                               }
    71                                               cross_6: cross  ALU_cp,B_cp1,A_cp {
    72                                                               bins B_data_walkingones_A_zero = binsof(ALU_cp.Bins_bitwise) && binsof(B_cp1.B_data_walkingones) && binsof(A_cp.A_data_0) ;
    73                                                               option.cross_auto_bin_max=0;
    74                                               }
    75                                               
    76                                               Invalid_OR_XOR: cross ALU_cp,RED_OP_A_cp,RED_OP_B_cp {
    77                                                                     bins invalid_reduction_A = ( binsof(ALU_cp.Bins_shift) || binsof(ALU_cp.Bins_arith) ) && binsof(RED_OP_A_cp.reduction_a_1);
    78                                                                     bins invalid_reduction_B = ( binsof(ALU_cp.Bins_shift) || binsof(ALU_cp.Bins_arith) ) && binsof(RED_OP_B_cp.reduction_b_1);
    79                                                                     option.cross_auto_bin_max=0;
    80                                               }
    81                                               endgroup
    82                                               
    83                                               function new (string name = "ALSU_coverage", uvm_component parent = null);
    84              1                          1         super.new(name,parent);
    85              1                          1        cvr_gp =new() ;
    86                                               endfunction
    87                                               
    88                                               function void build_phase (uvm_phase phase);
    89              1                          1         super.build_phase(phase);
    90              1                          1         cov_export = new("cov_export",this);
    91              1                          1         cov_fifo = new("cov_fifo",this);
    92                                                   
    93                                               endfunction
    94                                               
    95                                               function void connect_phase (uvm_phase phase);
    96              1                          1     super.connect_phase(phase);
    97              1                          1     cov_export.connect(cov_fifo.analysis_export);
    98                                               endfunction
    99                                               
    100                                              task run_phase (uvm_phase phase);
    101                                              
    102             1                          1     super.run_phase(phase);
    103             1                          1     forever begin
    104             1                      50002     cov_fifo.get(cov_seq_item);
    105             1                      50001     cvr_gp.sample();


=================================================================================
=== Instance: /alsu_config_obj_pkg
=== Design Unit: work.alsu_config_obj_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        10         0        10     0.00%

================================Branch Details================================

Branch Coverage for instance /alsu_config_obj_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_config_obj.sv
------------------------------------IF Branch------------------------------------
    8                                    ***0***     Count coming in to IF
    8               1                    ***0***     `uvm_object_utils(alsu_config_obj)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    8                                    ***0***     Count coming in to IF
    8               2                    ***0***     `uvm_object_utils(alsu_config_obj)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    8                                    ***0***     Count coming in to IF
    8               3                    ***0***     `uvm_object_utils(alsu_config_obj)
    8               4                    ***0***     `uvm_object_utils(alsu_config_obj)
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    8                                    ***0***     Count coming in to IF
    8               5                    ***0***     `uvm_object_utils(alsu_config_obj)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    8                                    ***0***     Count coming in to IF
    8               6                    ***0***     `uvm_object_utils(alsu_config_obj)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       2         0         2     0.00%

================================Condition Details================================

Condition Coverage for instance /alsu_config_obj_pkg --

  File ALSU_config_obj.sv
----------------Focused Condition View-------------------
Line       8 Item    1  (name != 0)
Condition totals: 0 of 1 input term covered = 0.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  (name != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  (name != 0)_0         -                             
  Row   2:    ***0***  (name != 0)_1         -                             

----------------Focused Condition View-------------------
Line       8 Item    2  (tmp_data__ != null)
Condition totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (tmp_data__ != null)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:    ***0***  (tmp_data__ != null)_0  -                             
  Row   2:    ***0***  (tmp_data__ != null)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      11         1        10     9.09%

================================Statement Details================================

Statement Coverage for instance /alsu_config_obj_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_config_obj.sv
    1                                                package alsu_config_obj_pkg;
    2                                                
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                
    6                                                class alsu_config_obj extends uvm_object;
    7                                                
    8               1                    ***0***     `uvm_object_utils(alsu_config_obj)
    8               2                    ***0***     
    8               3                    ***0***     
    8               4                    ***0***     
    8               5                    ***0***     
    8               6                    ***0***     
    8               7                    ***0***     
    8               8                    ***0***     
    8               9                    ***0***     
    8              10                    ***0***     
    9                                                
    10                                               virtual alsu_if alsu_config_vif;
    11                                               
    12                                               function new(string name = "alsu_config_obj");
    13              1                          1         super.new(name);


=================================================================================
=== Instance: /alsu_driver_pkg
=== Design Unit: work.alsu_driver_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /alsu_driver_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_driver.sv
------------------------------------IF Branch------------------------------------
    38                                     50001     Count coming in to IF
    38              1                    ***0***         `uvm_info("run_phase",driver_seq_item.convert2string_stimulus(),UVM_HIGH)
                                           50001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      22        19         3    86.36%

================================Statement Details================================

Statement Coverage for instance /alsu_driver_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_driver.sv
    1                                                package alsu_driver_pkg;
    2                                                
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                import ALSU_sequence_item_pkg::*;
    6                                                class alsu_driver extends uvm_driver #(ALSU_sequence_item);
    7                                                
    8               1                    ***0***     `uvm_component_utils(alsu_driver)
    8               2                    ***0***     
    8               3                          2     
    9                                                
    10                                               virtual alsu_if alsu_driver_vif;
    11                                               ALSU_sequence_item driver_seq_item;
    12                                               
    13                                               function new(string name = "alsu_driver" , uvm_component parent = null);
    14              1                          1         super.new(name,parent);
    15                                               endfunction
    16                                               
    17                                               
    18                                               task run_phase (uvm_phase phase);
    19                                               
    20              1                          1     super.run_phase(phase);
    21                                               
    22              1                          1     forever begin
    23              1                      50002         driver_seq_item = ALSU_sequence_item::type_id::create("driver_seq_item");
    24              1                      50002         seq_item_port.get_next_item(driver_seq_item);
    25              1                      50001         alsu_driver_vif.A = driver_seq_item.A ;
    26              1                      50001         alsu_driver_vif.B = driver_seq_item.B ;
    27              1                      50001         alsu_driver_vif.rst = driver_seq_item.rst;
    28              1                      50001         alsu_driver_vif.opcode = driver_seq_item.opcode ;
    29              1                      50001         alsu_driver_vif.cin = driver_seq_item.cin ;
    30              1                      50001         alsu_driver_vif.serial_in = driver_seq_item.serial_in ;
    31              1                      50001         alsu_driver_vif.red_op_A = driver_seq_item.red_op_A ;
    32              1                      50001         alsu_driver_vif.red_op_B = driver_seq_item.red_op_B ;
    33              1                      50001         alsu_driver_vif.bypass_A = driver_seq_item.bypass_A ;
    34              1                      50001         alsu_driver_vif.bypass_B = driver_seq_item.bypass_B ;
    35              1                      50001         alsu_driver_vif.direction = driver_seq_item.direction ;
    36              1                      50001         @(negedge alsu_driver_vif.clk);
    37              1                      50001         seq_item_port.item_done();
    38              1                    ***0***         `uvm_info("run_phase",driver_seq_item.convert2string_stimulus(),UVM_HIGH)


=================================================================================
=== Instance: /ALSU_monitor_pkg
=== Design Unit: work.ALSU_monitor_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         1         1    50.00%

================================Branch Details================================

Branch Coverage for instance /ALSU_monitor_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_monitor.sv
------------------------------------IF Branch------------------------------------
    47                                     50001     Count coming in to IF
    47              1                    ***0***     `uvm_info("run_phase",$sformatf("sequence item broadcast done ,%s",mon_seq_item.convert2string),UVM_HIGH);
                                           50001     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      22        19         3    86.36%

================================Statement Details================================

Statement Coverage for instance /ALSU_monitor_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_monitor.sv
    1                                                package ALSU_monitor_pkg;
    2                                                
    3                                                import uvm_pkg::*;
    4                                                `include"uvm_macros.svh"
    5                                                 import ALSU_sequence_item_pkg::*;
    6                                                
    7                                                class ALSU_monitor extends uvm_monitor;
    8               1                    ***0***     `uvm_component_utils(ALSU_monitor)
    8               2                    ***0***     
    8               3                          2     
    9                                                
    10                                               ALSU_sequence_item mon_seq_item;
    11                                               virtual alsu_if alsu_vif;
    12                                               uvm_analysis_port #(ALSU_sequence_item) mon_ap;
    13                                               
    14                                               function new (string name = "ALSU_monitor" , uvm_component parent = null);
    15              1                          1         super.new(name,parent);
    16                                               endfunction
    17                                               
    18                                               // build phase //
    19                                               
    20                                               function void build_phase(uvm_phase phase);
    21                                               
    22              1                          1     super.build_phase(phase);
    23              1                          1     mon_ap = new("mon_ap",this);
    24                                               
    25                                               endfunction 
    26                                               
    27                                               // run phase // 
    28                                               
    29                                               task run_phase (uvm_phase phase) ;
    30                                               
    31              1                          1     super.run_phase(phase);
    32                                               
    33              1                          1     forever begin
    34              1                      50002         mon_seq_item = ALSU_sequence_item::type_id::create("mon_seq_item");
    35              1                      50002         @(negedge alsu_vif.clk)
    36              1                      50001     mon_seq_item.A = alsu_vif.A;
    37              1                      50001     mon_seq_item.B = alsu_vif.B;
    38              1                      50001     mon_seq_item.opcode = opcode_e'(alsu_vif.opcode);
    39              1                      50001     mon_seq_item.cin = alsu_vif.cin;
    40              1                      50001     mon_seq_item.serial_in = alsu_vif.serial_in;
    41              1                      50001     mon_seq_item.red_op_A = alsu_vif.red_op_A;
    42              1                      50001     mon_seq_item.red_op_B = alsu_vif.red_op_B;
    43              1                      50001     mon_seq_item.bypass_A = alsu_vif.bypass_A;
    44              1                      50001     mon_seq_item.bypass_B = alsu_vif.bypass_B;
    45              1                      50001     mon_seq_item.direction = alsu_vif.direction;
    46              1                      50001     mon_ap.write(mon_seq_item);
    47              1                    ***0***     `uvm_info("run_phase",$sformatf("sequence item broadcast done ,%s",mon_seq_item.convert2string),UVM_HIGH);


=================================================================================
=== Instance: /ALSU_sequencer_pkg
=== Design Unit: work.ALSU_sequencer_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         2         2    50.00%

================================Statement Details================================

Statement Coverage for instance /ALSU_sequencer_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_sequencer.sv
    1                                                package ALSU_sequencer_pkg;
    2                                                import uvm_pkg::*;
    3                                                `include"uvm_macros.svh"
    4                                                import ALSU_sequence_item_pkg::*;
    5                                                
    6                                                class ALSU_sequencer extends uvm_sequencer #(ALSU_sequence_item);
    7               1                    ***0***     `uvm_component_utils(ALSU_sequencer);
    7               2                    ***0***     
    7               3                          2     
    8                                                
    9                                                function new (string name = "ALSU_sequencer" , uvm_component parent = null);
    10              1                          1         super.new(name,parent);


=================================================================================
=== Instance: /ALSU_agent_pkg
=== Design Unit: work.ALSU_agent_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         4         1         3    25.00%

================================Branch Details================================

Branch Coverage for instance /ALSU_agent_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_agent.sv
------------------------------------IF Branch------------------------------------
    27                                         1     Count coming in to IF
    27              1                    ***0***     if(! uvm_config_db #(alsu_config_obj)::get(this,"","cfg",alsu_cfg)) begin
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    28                                   ***0***     Count coming in to IF
    28              1                    ***0***         `uvm_fatal("build_phase","Agent unable to get the configuration object from config database");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      15        12         3    80.00%

================================Statement Details================================

Statement Coverage for instance /ALSU_agent_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_agent.sv
    1                                                package ALSU_agent_pkg;
    2                                                
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                import ALSU_sequencer_pkg::*;
    6                                                import ALSU_monitor_pkg::*;
    7                                                import alsu_driver_pkg::*;
    8                                                import alsu_config_obj_pkg::*;
    9                                                import ALSU_sequence_item_pkg::*;
    10                                               class ALSU_agent extends uvm_agent ;
    11              1                    ***0***     `uvm_component_utils(ALSU_agent)
    11              2                    ***0***     
    11              3                          2     
    12                                               
    13                                               ALSU_monitor mon;
    14                                               alsu_driver driver;
    15                                               ALSU_sequencer sqr;
    16                                               alsu_config_obj alsu_cfg;
    17                                               virtual alsu_if alsu_vif;
    18                                               
    19                                               uvm_analysis_port #(ALSU_sequence_item) agent_ap;
    20                                               
    21                                               function new(string name = "ALSU_agent", uvm_component parent = null);
    22              1                          1         super.new(name,parent);
    23                                               endfunction
    24                                               
    25                                               function void build_phase (uvm_phase phase);
    26              1                          1     super.build_phase(phase);
    27                                               if(! uvm_config_db #(alsu_config_obj)::get(this,"","cfg",alsu_cfg)) begin
    28              1                    ***0***         `uvm_fatal("build_phase","Agent unable to get the configuration object from config database");
    29                                               end
    30                                               
    31              1                          1     mon = ALSU_monitor::type_id::create("mon",this);
    32              1                          1     driver = alsu_driver::type_id::create("driver",this);
    33              1                          1     sqr = ALSU_sequencer::type_id::create("sqr",this);
    34              1                          1     agent_ap = new("agent_ap",this);
    35                                               
    36                                               endfunction
    37                                               
    38                                               function void connect_phase(uvm_phase phase);
    39              1                          1         super.connect_phase(phase);
    40              1                          1         driver.alsu_driver_vif = alsu_cfg.alsu_config_vif;
    41              1                          1         mon.alsu_vif= alsu_cfg.alsu_config_vif;
    42              1                          1         driver.seq_item_port.connect(sqr.seq_item_export);
    43              1                          1         mon.mon_ap.connect(agent_ap);


=================================================================================
=== Instance: /alsu_env_pkg
=== Design Unit: work.alsu_env_pkg
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       9         7         2    77.77%

================================Statement Details================================

Statement Coverage for instance /alsu_env_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_env.sv
    1                                                package alsu_env_pkg;
    2                                                import uvm_pkg::*;
    3                                                `include "uvm_macros.svh"
    4                                                import ALSU_agent_pkg::*;
    5                                                import ALSU_coverage_collector_pkg::*;
    6                                                class  alsu_env extends uvm_env;
    7                                                
    8                                                // registering class to factory //
    9               1                    ***0***     `uvm_component_utils(alsu_env)
    9               2                    ***0***     
    9               3                          2     
    10                                               ALSU_coverage cov;
    11                                               ALSU_agent agent;
    12                                               // constructor //
    13                                               function new(string name = "alsu_env", uvm_component parent = null);
    14              1                          1         super.new(name,parent);
    15                                               endfunction
    16                                               
    17                                               function void build_phase(uvm_phase phase);
    18                                               
    19              1                          1     super.build_phase(phase);
    20              1                          1     cov = ALSU_coverage::type_id::create("cov",this);
    21              1                          1     agent = ALSU_agent::type_id::create("agent",this);
    22                                               
    23                                               endfunction
    24                                               
    25                                               function void connect_phase (uvm_phase phase);
    26              1                          1     super.connect_phase(phase);
    27              1                          1     agent.agent_ap.connect(cov.cov_export);


=================================================================================
=== Instance: /alsu_test_pkg
=== Design Unit: work.alsu_test_pkg
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        12         5         7    41.66%

================================Branch Details================================

Branch Coverage for instance /alsu_test_pkg

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_test.sv
------------------------------------IF Branch------------------------------------
    35                                         1     Count coming in to IF
    35              1                    ***0***     if(!uvm_config_db #(virtual alsu_if)::get(this,"","alsu_IF",alsu_config_obj_test.alsu_config_vif)) begin
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    36                                   ***0***     Count coming in to IF
    36              1                    ***0***         `uvm_fatal("build_phase","alsu_test Failed to get the virtual interface from config database.");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.00%

------------------------------------IF Branch------------------------------------
    54                                         1     Count coming in to IF
    54              1                          1     `uvm_info("run_phase","Reset Asserted",UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    56                                         1     Count coming in to IF
    56              1                          1     `uvm_info("run_phase","Reset Deasserted",UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    58                                         1     Count coming in to IF
    58              1                          1     `uvm_info("run_phase"," Main Stimulus Started",UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    60                                         1     Count coming in to IF
    60              1                          1     `uvm_info("run_phase","Main Stimulus Finished ",UVM_LOW);
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.00%


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      20        17         3    85.00%

================================Statement Details================================

Statement Coverage for instance /alsu_test_pkg --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File ALSU_test.sv
    1                                                package alsu_test_pkg;
    2                                                import uvm_pkg::*;
    3                                                `include "uvm_macros.svh"
    4                                                import alsu_env_pkg::*;
    5                                                import alsu_config_obj_pkg::*;
    6                                                import ALSU_sequence_item_pkg::*;
    7                                                import ALSU_sequencer_pkg::*;
    8                                                import ALSU_sequence_pkg::*;
    9                                                
    10                                               class alsu_test extends uvm_test;
    11                                               
    12                                               // registering class to factory //
    13              1                    ***0***     `uvm_component_utils(alsu_test)
    13              2                    ***0***     
    13              3                          4     
    14                                               
    15                                               alsu_env env;
    16                                               alsu_config_obj alsu_config_obj_test;
    17                                               ALSU_main_seq main_sequence;
    18                                               ALSU_reset_seq reset_sequence;
    19                                               
    20                                               
    21                                               // constructor //
    22                                               function new(string name = "alsu_test", uvm_component parent = null);
    23              1                          1         super.new(name,parent);
    24                                               endfunction
    25                                               
    26                                               
    27                                               // build phase //
    28                                               
    29                                               function void build_phase(uvm_phase phase);
    30                                               
    31              1                          1     super.build_phase(phase);
    32                                               
    33              1                          1     alsu_config_obj_test = alsu_config_obj::type_id::create("alsu_config_obj_test");
    34                                               
    35                                               if(!uvm_config_db #(virtual alsu_if)::get(this,"","alsu_IF",alsu_config_obj_test.alsu_config_vif)) begin
    36              1                    ***0***         `uvm_fatal("build_phase","alsu_test Failed to get the virtual interface from config database.");
    37                                               end
    38                                               
    39              1                          1     uvm_config_db #(alsu_config_obj)::set(this,"*","cfg",alsu_config_obj_test);
    40                                               
    41              1                          1     env = alsu_env::type_id::create("env",this);
    42              1                          1     main_sequence = ALSU_main_seq::type_id::create("main_sequence",this);
    43              1                          1     reset_sequence = ALSU_reset_seq::type_id::create("reset_sequence",this);
    44                                               
    45                                               endfunction 
    46                                               
    47                                               // run phase //
    48                                               
    49                                               task run_phase(uvm_phase phase);
    50                                               
    51              1                          1     super.run_phase(phase);
    52              1                          1     phase.raise_objection(this);
    53                                               
    54              1                          1     `uvm_info("run_phase","Reset Asserted",UVM_LOW);
    55              1                          1     reset_sequence.start(env.agent.sqr);
    56              1                          1     `uvm_info("run_phase","Reset Deasserted",UVM_LOW);
    57                                               
    58              1                          1     `uvm_info("run_phase"," Main Stimulus Started",UVM_LOW);
    59              1                          1     main_sequence.start(env.agent.sqr);
    60              1                          1     `uvm_info("run_phase","Main Stimulus Finished ",UVM_LOW);
    61                                               
    62              1                          1     phase.drop_objection(this);


COVERGROUP COVERAGE:
----------------------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal       Bins    Status               
                                                                                                         
----------------------------------------------------------------------------------------------------------
 TYPE /ALSU_coverage_collector_pkg/ALSU_coverage/cvr_gp 
                                                      100.00%        100          -    Covered              
    covered/total bins:                                    32         32          -                      
    missing/total bins:                                     0         32          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint A_cp                                   100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint A_cp1                                  100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint B_cp                                   100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint B_cp1                                  100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint ALU_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 7          7          -                      
        missing/total bins:                                 0          7          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Cin_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Shift_in_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint Direction_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint RED_OP_A_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Coverpoint RED_OP_B_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
    Cross ADD_MULT_A_B_Zero_MaxP_N                    100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross ADD_CIN                                     100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross Shift_Serial_in                             100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross ROT_SHIFT_Direction                         100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross cross_5                                     100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross cross_6                                     100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
    Cross Invalid_OR_XOR                              100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
 Covergroup instance \/ALSU_coverage_collector_pkg::ALSU_coverage::cvr_gp  
                                                      100.00%        100          -    Covered              
    covered/total bins:                                    32         32          -                      
    missing/total bins:                                     0         32          -                      
    % Hit:                                            100.00%        100          -                      
    Coverpoint A_cp                                   100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin A_data_0                                     9881          1          -    Covered              
        bin A_data_max                                   8868          1          -    Covered              
        bin A_data_min                                   9867          1          -    Covered              
        default bin A_data_default                      21385                     -    Occurred             
    Coverpoint A_cp1                                  100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin A_data_walkingones[1]                        2439          1          -    Covered              
        bin A_data_walkingones[2]                        2387          1          -    Covered              
    Coverpoint B_cp                                   100.00%        100          -    Covered              
        covered/total bins:                                 3          3          -                      
        missing/total bins:                                 0          3          -                      
        % Hit:                                        100.00%        100          -                      
        bin B_data_0                                    12059          1          -    Covered              
        bin B_data_max                                   8787          1          -    Covered              
        bin B_data_min                                   9248          1          -    Covered              
        default bin B_data_default                      19907                     -    Occurred             
    Coverpoint B_cp1                                  100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin B_data_walkingones[1]                        1086          1          -    Covered              
        bin B_data_walkingones[2]                        1161          1          -    Covered              
    Coverpoint ALU_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 7          7          -                      
        missing/total bins:                                 0          7          -                      
        % Hit:                                        100.00%        100          -                      
        illegal_bin Bins_invalid[INVALID_6]              1031                     -    Occurred             
        illegal_bin Bins_invalid[INVALID_7]               982                     -    Occurred             
        bin Bins_shift[SHIFT]                            7933          1          -    Covered              
        bin Bins_shift[ROTATE]                           7958          1          -    Covered              
        bin Bins_arith[ADD]                              7989          1          -    Covered              
        bin Bins_arith[MULT]                             7972          1          -    Covered              
        bin Bins_bitwise[OR]                             8086          1          -    Covered              
        bin Bins_bitwise[XOR]                            8050          1          -    Covered              
        bin Bins_trans                                      1          1          -    Covered              
    Coverpoint Cin_cp                                 100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin cin_zero_one                                50001          1          -    Covered              
    Coverpoint Shift_in_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin SERIAL_IN_zero_one                          50001          1          -    Covered              
    Coverpoint Direction_cp                           100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        bin Direction_zero_one                          50001          1          -    Covered              
    Coverpoint RED_OP_A_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin reduction_a_0                               29248          1          -    Covered              
        bin reduction_a_1                               20753          1          -    Covered              
    Coverpoint RED_OP_B_cp                            100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        bin reduction_b_0                               29157          1          -    Covered              
        bin reduction_b_1                               20844          1          -    Covered              
    Cross ADD_MULT_A_B_Zero_MaxP_N                    100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin mult_add_a_b                            14374          1          -    Covered              
    Cross ADD_CIN                                     100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin Cin_Add_zero_one                         7989          1          -    Covered              
    Cross Shift_Serial_in                             100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin Shift_in_zero_one                        7933          1          -    Covered              
    Cross ROT_SHIFT_Direction                         100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin Direction_ROT_Shift_zero_one            15891          1          -    Covered              
    Cross cross_5                                     100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin A_data_walkingones_b_zero                2441          1          -    Covered              
    Cross cross_6                                     100.00%        100          -    Covered              
        covered/total bins:                                 1          1          -                      
        missing/total bins:                                 0          1          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin B_data_walkingones_A_zero                1071          1          -    Covered              
    Cross Invalid_OR_XOR                              100.00%        100          -    Covered              
        covered/total bins:                                 2          2          -                      
        missing/total bins:                                 0          2          -                      
        % Hit:                                        100.00%        100          -                      
        Auto, Default and User Defined Bins:
            bin invalid_reduction_A                     15992          1          -    Covered              
            bin invalid_reduction_B                     15978          1          -    Covered              

TOTAL COVERGROUP COVERAGE: 100.00%  COVERGROUP TYPES: 1

DIRECTIVE COVERAGE:
--------------------------------------------------------------------------------------------
Name                                     Design Design   Lang File(Line)      Hits Status    
                                         Unit   UnitType                                     
--------------------------------------------------------------------------------------------
/alsu_top/DUT/ALSU_SVA/bypass_a_c        ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(89)
                                                                              1871 Covered   
/alsu_top/DUT/ALSU_SVA/bypass_b_c        ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(92)
                                                                              1823 Covered   
/alsu_top/DUT/ALSU_SVA/mult_c            ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(95)
                                                                               238 Covered   
/alsu_top/DUT/ALSU_SVA/add_c             ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(98)
                                                                               265 Covered   
/alsu_top/DUT/ALSU_SVA/or_a_c            ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(101)
                                                                              1438 Covered   
/alsu_top/DUT/ALSU_SVA/or_b_c            ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(104)
                                                                               655 Covered   
/alsu_top/DUT/ALSU_SVA/a_or_b_c          ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(107)
                                                                              4124 Covered   
/alsu_top/DUT/ALSU_SVA/xor_a_c           ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(111)
                                                                              1416 Covered   
/alsu_top/DUT/ALSU_SVA/xor_b_c           ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(114)
                                                                               601 Covered   
/alsu_top/DUT/ALSU_SVA/a_xor_b_c         ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(117)
                                                                              4120 Covered   
/alsu_top/DUT/ALSU_SVA/shift_right_c     ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(120)
                                                                               106 Covered   
/alsu_top/DUT/ALSU_SVA/shift_left_c      ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(123)
                                                                               101 Covered   
/alsu_top/DUT/ALSU_SVA/rotate_right_c    ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(126)
                                                                               103 Covered   
/alsu_top/DUT/ALSU_SVA/rotate_left_c     ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(129)
                                                                               119 Covered   
/alsu_top/DUT/ALSU_SVA/invalid_1_c       ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(132)
                                                                              1510 Covered   
/alsu_top/DUT/ALSU_SVA/invalid_2_c       ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(135)
                                                                              19350 Covered   
/alsu_top/DUT/ALSU_SVA/invalid_1_leds_c  ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(138)
                                                                              1510 Covered   
/alsu_top/DUT/ALSU_SVA/invalid_2_leds_c  ALSU_Assertions Verilog  SVA  ALSU_Assertions.sv(141)
                                                                              19350 Covered   

TOTAL DIRECTIVE COVERAGE: 100.00%  COVERS: 18

ASSERTION RESULTS:
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/alsu_top/DUT/ALSU_SVA/bypass_a_a
                     ALSU_Assertions.sv(88)             0          1
/alsu_top/DUT/ALSU_SVA/bypass_b_a
                     ALSU_Assertions.sv(91)             0          1
/alsu_top/DUT/ALSU_SVA/mult_a
                     ALSU_Assertions.sv(94)             0          1
/alsu_top/DUT/ALSU_SVA/add_a
                     ALSU_Assertions.sv(97)             0          1
/alsu_top/DUT/ALSU_SVA/or_a_a
                     ALSU_Assertions.sv(100)            0          1
/alsu_top/DUT/ALSU_SVA/or_b_a
                     ALSU_Assertions.sv(103)            0          1
/alsu_top/DUT/ALSU_SVA/a_or_b_a
                     ALSU_Assertions.sv(106)            0          1
/alsu_top/DUT/ALSU_SVA/xor_a_a
                     ALSU_Assertions.sv(110)            0          1
/alsu_top/DUT/ALSU_SVA/xor_b_a
                     ALSU_Assertions.sv(113)            0          1
/alsu_top/DUT/ALSU_SVA/a_xor_b_a
                     ALSU_Assertions.sv(116)            0          1
/alsu_top/DUT/ALSU_SVA/shift_right_a
                     ALSU_Assertions.sv(119)            0          1
/alsu_top/DUT/ALSU_SVA/shift_left_a
                     ALSU_Assertions.sv(122)            0          1
/alsu_top/DUT/ALSU_SVA/rotate_right_a
                     ALSU_Assertions.sv(125)            0          1
/alsu_top/DUT/ALSU_SVA/rotate_left_a
                     ALSU_Assertions.sv(128)            0          1
/alsu_top/DUT/ALSU_SVA/invalid_1_a
                     ALSU_Assertions.sv(131)            0          1
/alsu_top/DUT/ALSU_SVA/invalid_2_a
                     ALSU_Assertions.sv(134)            0          1
/alsu_top/DUT/ALSU_SVA/invalid_1_leds_a
                     ALSU_Assertions.sv(137)            0          1
/alsu_top/DUT/ALSU_SVA/invalid_2_leds_a
                     ALSU_Assertions.sv(140)            0          1
/alsu_top/DUT/ALSU_SVA/reset_outputs/reset_a
                     ALSU_Assertions.sv(148)            0          1
/ALSU_sequence_pkg/ALSU_main_seq/body/#ublk#37877255#38/immed__41
                     ALSU_sequence.sv(41)               0          1

Total Coverage By Instance (filtered view): 83.67%

